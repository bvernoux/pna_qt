name: Build pna_qt (qmake) with Qt 6.9

# Trigger the workflow on push events to the main branch and on pull requests targeting main
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # Strategy defines the matrix of configurations to run
    strategy:
      fail-fast: false # Don't cancel all jobs if one fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        qt_version: [ '6.9.0' ] # Specify the exact Qt version
        include:
          # Define specific settings for each OS
          - os: ubuntu-latest
            qt_arch: 'gcc_64'
            artifact_name: pna_qt-qmake-linux
            build_config: 'release'
            make_command: 'make'
            install_command: 'make install'
            make_flags: '-j$(nproc)' # Parallel build for Linux
          - os: macos-latest
            qt_arch: 'clang_64'
            artifact_name: pna_qt-qmake-macos
            build_config: 'release'
            make_command: 'make'
            install_command: 'make install'
            make_flags: '-j$(sysctl -n hw.ncpu)' # Parallel build for macOS
          - os: windows-latest
            qt_arch: 'win64_msvc2019_64' # Using MSVC. If MinGW is desired, change to 'win64_mingw'
            artifact_name: pna_qt-qmake-windows
            build_config: 'release'
            make_command: 'nmake' # Default build tool for MSVC Makefiles
            install_command: 'nmake install'
            make_flags: '' # nmake does not have a standard parallel flag like make

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Environment variables accessible to all steps
    env:
      QT_VERSION: ${{ matrix.qt_version }}
      BUILD_CONFIG: ${{ matrix.build_config }}
      # Define where qmake's 'make install' should place files
      # This overrides the default /opt path in the .pro file for Unix
      INSTALL_ROOT: ${{ github.workspace }}/install_dir

    steps:
    # 1. Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Install Qt
    - name: Install Qt ${{ env.QT_VERSION }}
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'linux' # host OS, used to select the correct Qt installer binary
        target: 'desktop'
        arch: ${{ matrix.qt_arch }}
        # Specify required Qt modules based *only* on pna_qt.pro:
        # QT += core gui widgets printsupport svg
        # core, gui, widgets are in qtbase
        modules: 'qtbase qtprintsupport qtsvg' # Corrected list of modules
        # caching: 'true' # Enable caching to speed up subsequent builds (optional)
        # cache-key-prefix: ${{ runner.os }}-${{ matrix.qt_arch }}-qmake # Optional: refine cache key

    # 3. Run qmake to generate Makefiles
    #    install-qt-action adds qmake to the PATH
    #    CONFIG+=release ensures a release build
    #    The .pro file needs to be specified
    - name: Run qmake
      run: |
        qmake pna_qt.pro CONFIG+=${{ env.BUILD_CONFIG }}
      shell: bash # Use bash for consistency

    # 4. Build the project
    #    Uses the appropriate make command based on the OS/compiler matrix
    - name: Build Project
      run: ${{ matrix.make_command }} ${{ matrix.make_flags }}
      shell: bash # Use bash for consistency even on Windows

    # 5. Install the project
    #    Runs the install target defined in the Makefile generated by qmake
    #    The INSTALL_ROOT env variable redirects the installation location
    - name: Install Project
      run: ${{ matrix.install_command }}
      shell: bash # Use bash for consistency

    # 6. Prepare Artifacts (Optional but Recommended)
    #    Use platform-specific deployment tools like windeployqt/macdeployqt
    #    This step assumes the executable is in INSTALL_ROOT/bin
    #    Note: The exact path might vary based on the .pro file's install rules
    #          Check the contents of 'install_dir' after the install step if needed.

    - name: Package application (Windows - windeployqt)
      if: runner.os == 'Windows'
      run: |
        # Assuming windeployqt is in the PATH (install-qt-action usually adds it)
        # Assuming the executable is in install_dir/bin based on typical qmake install rules
        cd ${{ env.INSTALL_ROOT }}/bin
        windeployqt pna_qt.exe --release --no-translations --no-system-d3d-compiler --no-opengl-sw --no-angle --svg --printsupport
      shell: bash # Use bash for consistency

    - name: Package application (macOS - macdeployqt)
      if: runner.os == 'macOS'
      run: |
        # Assuming macdeployqt is in the PATH
        # Assuming the .app bundle is in INSTALL_ROOT directly (adjust if needed)
        cd ${{ env.INSTALL_ROOT }}
        macdeployqt pna_qt.app -dmg # Create a DMG disk image
      shell: bash

    # 7. Upload the build artifact
    #    Uploads the contents of the directory where files were installed
    #    On Windows/macOS, this includes dependencies added by deploy tools
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-${{ env.QT_VERSION }}
        path: ${{ env.INSTALL_ROOT }} # Upload the entire installation directory
